{"name":"UVaOJ","postlist":[{"title":"UVa10285 - Longest Run on a Snowboard","slug":"uva10285","date":"2015-11-29T15:22:47.000Z","updated":"2018-04-12T21:44:37.000Z","comments":true,"path":"api/articles/uva10285.json","excerpt":"<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><p>假设从( x, y )出发，并且从( x, y )出发所能走的最长路为 d[x][y]，那么设想如果( x  - 1, y )的值（即题目所给的高度）要小于(x，y)，那么d[x-1][y] + 1 有可能就是我们所要求的d[x][y]，因为这条路是单向的，只可能从较小的(x-1， y)走向(x，y)。如果考虑四个方向，用(x’， y’)表示(x ， y)上下左右四个方向，那么d[x][y] = max(d[x’][y’]) + 1，且 (x’, y’)上的值要小于(x, y)。那么从这个方程可以看出这实际上可以采用 DFS 加上 dp 的做法，或者称之为记忆化搜索。而 搜索 的终点则是某点(x, y)的四周都比他大，则返回 1。</p>","keywords":null,"content":null,"raw":null,"categories":[{"name":"ACM","path":"api/categories/ACM.json"}],"tags":[{"name":"ACM","path":"api/tags/ACM.json"},{"name":"UVaOJ","path":"api/tags/UVaOJ.json"}]},{"title":"UVa1395 - Slim Span","slug":"uva1395","date":"2016-01-25T19:05:41.000Z","updated":"2018-04-12T21:44:33.000Z","comments":true,"path":"api/articles/uva1395.json","excerpt":"<h1 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h1><p>首先有一点是可以确定的：对于任何一连通图，必有一生成树（简直废话）。<br>对于这一题，关键的问题是确定最大与最小。对于这种寻找两个相关变量的题，其实一般可以先试着确定一个，然后再去寻找另一个。<br>比如在这题中，可以迭代每一个边 L，同时把这条边 L 当做最小的边，用比它大的边去试着连同一幅图，知道找到边 R， 使得加上这条边 R 后刚好可以凑成一幅联通图。<br>因此，从上述思路可以看出，排序是必不可少了。所有排序是第一步。<br>排序好后进行遍历 L，建立 N （顶点数） 个并查集 S，每加入一条边就将该边的端点对应的并查集合并（前提是两个端点对应不同的并查集）。<br>直到刚好加入边 R 后，并查集只剩一个，且大小刚好与顶点数相等。此时对于 L 来说，R － L 极为其 “苗条度”。<br>因此对所有求得的“苗条度”求一个最小值即可。如果连一个“苗条度”都没有，那结果自然就是找不到合适的答案了。</p>","keywords":null,"content":null,"raw":null,"categories":[{"name":"ACM","path":"api/categories/ACM.json"}],"tags":[{"name":"ACM","path":"api/tags/ACM.json"},{"name":"UVaOJ","path":"api/tags/UVaOJ.json"}]}]}
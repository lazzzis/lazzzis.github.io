{"name":"JavaScript","postlist":[{"title":"借助 Proxy 实现一个 DefaultDict","slug":"defaultdict-in-js","date":"2017-10-01T02:44:12.000Z","updated":"2018-04-12T21:42:03.000Z","comments":true,"path":"api/articles/defaultdict-in-js.json","excerpt":"<p>这里的 <code>DefaultDict</code> 指的是类似于 Python 中的 <a href=\"https://docs.python.org/3/library/collections.html#collections.defaultdict\" target=\"_blank\" rel=\"noopener\"><code>defaultdict</code></a> 的一种类。其基本特点就是当某个属性不存在于该对象中时，该对象会自动为这个属性创建一个默认值。这个默认值是由用户在创建 <code>DefaultDict</code> 时指定的。</p>\n<p>举个例子，现在需要一个对象，如果某个属性不在这个对象时，在为这个属性赋值为 0.</p>","keywords":null,"content":null,"raw":null,"categories":[],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"}]},{"title":"用 vue 写一个单页的 hexo 主题","slug":"hexo-theme-of-spa-in-vue","date":"2018-04-06T01:51:32.000Z","updated":"2018-04-12T19:40:01.000Z","comments":true,"path":"api/articles/hexo-theme-of-spa-in-vue.json","excerpt":"<p>大概一年以前，我发布过一个主题，名为 <a href=\"https://github.com/lazzzis/hexo-theme-mls\" target=\"_blank\" rel=\"noopener\">hexo-theme-mls</a>。这个主题是我当时在学完如何写一个 hexo 主题后完成的。后来在学了 vue 之后，构思着再写一个主题。我非常想把它写成一个单页应用，可是一直没有思绪。直到后来看到了 <a href=\"https://github.com/EYHN/hexo-theme-one\" target=\"_blank\" rel=\"noopener\">hexo-theme-one</a>，我才有了思绪，于是开始写一个单页的主题。</p>","keywords":null,"content":null,"raw":null,"categories":[],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"}]},{"title":"拓扑排序 / topological sort","slug":"intro-of-topological-sort","date":"2017-11-23T01:42:24.000Z","updated":"2018-04-12T21:43:09.000Z","comments":true,"path":"api/articles/intro-of-topological-sort.json","excerpt":"<p>问题描述: 提供一些以数字为 id 的任务(task)，这些任务存在如下图所示的依赖关系:</p>\n<p><img src=\"https://raw.githubusercontent.com/lazzzis/lazzzis.github.io/d123b09acd4b911b40cd9dcbfc0a6a5e36844773/projects/images/topo1.png\" alt=\"\"></p>\n<p>其中, <code>1 -&gt; 3</code> 表示任务 3 必须在任务 1 完成之后才能够开始。如上图中，任务 3 必须在任务 1 和任务 4 之后。而任务 4 又必须在任务 2 之后。</p>\n<p>而要求就是, 提供一个序列，要求按照这个序列能够顺利完成所有任务。这里假设每个时刻只能处理一个任务，而且一旦开始处理某个任务，那么你不能中止或切换到其它任务。这个答案可能不唯一。在上图中，一个可能的答案就是 <code>[1, 2, 4, 3, 5, 7, 6]</code>。</p>","keywords":null,"content":null,"raw":null,"categories":[],"tags":[{"name":"ACM","path":"api/tags/ACM.json"},{"name":"JavaScript","path":"api/tags/JavaScript.json"}]},{"title":"sort some list elements into an descreasing ones in js","slug":"list-sort-in-js","date":"2015-11-18T01:35:40.000Z","updated":"2018-04-12T21:43:27.000Z","comments":true,"path":"api/articles/list-sort-in-js.json","excerpt":"<h2 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h2><p>Sort is a prevalent topic in programing. Although the sort operation mostly is handled by the back-end like PHP, Java and so on, occasionaly some are occured in front-end. Here are some simple instances I dealt with recently.</p>\n<h2 id=\"Bubble-like-Sort\"><a href=\"#Bubble-like-Sort\" class=\"headerlink\" title=\"Bubble-like Sort\"></a>Bubble-like Sort</h2><p>Suppose some list elements ordered as follows:</p>\n<pre><code class=\"html\">&lt;ul id=&quot;demo&quot;&gt;\n    &lt;li&gt;2&lt;/li&gt;\n    &lt;li&gt;1&lt;/li&gt;\n    &lt;li&gt;4&lt;/li&gt;\n    &lt;li&gt;3&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<p>Every time I filter through the nodes to get the smallest-value one from 1st one to 4nd one, and then I put it to the tail of lists. Next, I still filter to get the smallest-value one but from 1st one to 3nd one, and still put it to the tail to the lists. Now, two elements are sorted, and still two ones stay idle. The operation continues until all the elements have been sorted.<br>The produceres can be illustrated as follows:</p>\n<blockquote>\n<p>2 1 4 3 -&gt; 2 4 3 1 -&gt; 4 3 1 2 -&gt; 4 1 2 3 -&gt; 1 2 3 4</p>\n</blockquote>","keywords":null,"content":null,"raw":null,"categories":[{"name":"Front-end","path":"api/categories/Front-end.json"}],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"}]},{"title":"在初学JS时犯的一些错误","slug":"mis-in-js","date":"2015-10-25T00:18:27.000Z","updated":"2018-04-12T21:43:34.000Z","comments":true,"path":"api/articles/mis-in-js.json","excerpt":"<p>表示最近在学JS, 相对个人以前学的Python, JAVA之类的语言, JS的语言确实有一些”奇葩”. 把初学时的一些语法错误记录下来,方便自己以后查阅, 如果能帮助到读这篇文章的你自然就更好了.</p>\n<h2 id=\"number-与-string-相加-减-乘-除\"><a href=\"#number-与-string-相加-减-乘-除\" class=\"headerlink\" title=\"number 与 string 相加/减/乘/除\"></a>number 与 string 相加/减/乘/除</h2><h3 id=\"Example-1\"><a href=\"#Example-1\" class=\"headerlink\" title=\"Example 1:\"></a>Example 1:</h3><pre><code class=\"js\">var a  = &quot;5&quot; + 2;   // the result is &quot;52&quot;\nvar b = 2 + &quot;5&quot;;    // the result is &quot;25&quot;\n</code></pre>","keywords":null,"content":null,"raw":null,"categories":[{"name":"Front-end","path":"api/categories/Front-end.json"}],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"}]},{"title":"创建了适用于 hexo 的一个主题 mls","slug":"new-blog-theme-mls","date":"2016-11-11T00:46:55.000Z","updated":"2018-04-12T21:43:40.000Z","comments":true,"path":"api/articles/new-blog-theme-mls.json","excerpt":"<p>之前用的主题是基于 <a href=\"https://github.com/hexojs/hexo-theme-landscape\" target=\"_blank\" rel=\"noopener\">landscape</a>, 虽然这确实是一个不错的主题，使用上也没什么不便，但毕竟这是一个他人贡献的主题。我一直想试着自己做一个主题。之前也尝试在 landscape 上改，修改了一些颜色，对 CSS 做了一些简单修改，但布局没变，整体一眼还是能看出这是 landscape，并且因为我当时不熟悉 EJS 模板，对 Sass 及 CSS3 不是特别熟悉，所以有些功能的实现也完全不知道怎么做，比如一些透明效果的动画。</p>\n<p>最近一段时间，相对以前来说稍微不忙了点，所以趁这个机会试着做一个主题了。</p>","keywords":null,"content":null,"raw":null,"categories":[{"name":"Front-end","path":"api/categories/Front-end.json"}],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"},{"name":"CSS","path":"api/tags/CSS.json"},{"name":"Sass","path":"api/tags/Sass.json"}]},{"title":"为什么 Vue 组件需要一个 name","slug":"name-attribute-in-vue-component","date":"2018-04-11T01:37:58.000Z","updated":"2018-04-12T19:39:00.000Z","comments":true,"path":"api/articles/name-attribute-in-vue-component.json","excerpt":"<p>无论是通过 <code>Vue.component</code> 的方式，还是在写 <code>.vue</code> 文件的方式，官方都会推荐你写一个 <code>name</code> 属性。但是好像这个 name 在渲染时又几乎用不到，那么它实际能干嘛呢?</p>","keywords":null,"content":null,"raw":null,"categories":[],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"}]},{"title":"终于完成了一个 OJ -- Putong OJ","slug":"notes-of-putongoj","date":"2017-06-02T03:53:12.000Z","updated":"2018-04-12T21:43:45.000Z","comments":true,"path":"api/articles/notes-of-putongoj.json","excerpt":"<p><strong>Putong OJ</strong> – 一个看上去很普通的 Online Judge，现已<a href=\"http://acm.cjlu.edu.cn\" target=\"_blank\" rel=\"noopener\">上线</a></p>\n<h1 id=\"Features\"><a href=\"#Features\" class=\"headerlink\" title=\"Features\"></a>Features</h1><p>说一些我自认为可以称得上特性的”特性”</p>\n<h2 id=\"单页应用\"><a href=\"#单页应用\" class=\"headerlink\" title=\"单页应用\"></a>单页应用</h2><p>估计现在没有一个 OJ 采用的是单页应用吧。</p>","keywords":null,"content":null,"raw":null,"categories":[],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"},{"name":"Projects","path":"api/tags/Projects.json"}]},{"title":"在JS中实现静态变量/函数","slug":"static-in-js","date":"2015-10-30T16:54:13.000Z","updated":"2018-04-12T21:44:13.000Z","comments":true,"path":"api/articles/static-in-js.json","excerpt":"<h2 id=\"静态变量-方法\"><a href=\"#静态变量-方法\" class=\"headerlink\" title=\"静态变量/方法\"></a>静态变量/方法</h2><p>静态变量/方法，一般来说是独立於对象的存在，它不属於任何一个具体的对象，它属於每一特定类的所有对象。也可以认为是属於一个类的。静态变量一般用於常数，或者存储某一类的所有对象需要共有的变量。<br>学JS的时候发现，与JAVA，C++相比，JS并没有明确定义静态的声明或使用方法。虽然没有说，但仍然需要，比如一个很经典的需要就时用静态变量统计一个类被实例化了几次。</p>","keywords":null,"content":null,"raw":null,"categories":[{"name":"Front-end","path":"api/categories/Front-end.json"}],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"}]},{"title":"node-thunkify 的实现及源码阅读","slug":"source-code-of-thunkify","date":"2017-06-29T19:52:32.000Z","updated":"2018-04-12T21:44:09.000Z","comments":true,"path":"api/articles/source-code-of-thunkify.json","excerpt":"<p>最近看了些项目的源码，其中就包括 <code>thunkify</code>。虽然 <code>thunkify</code> 代码简单，很快就读完了，不过看看项目的测试文件和提交历史，也还是能看出很多事物的。这次阅读的代码是当前最新版本，commit 编号 <a href=\"https://github.com/tj/node-thunkify/tree/0bd83e29df1bb0653230724f072cff96b0ab684e\" target=\"_blank\" rel=\"noopener\">0bd83e</a>。</p>\n<h1 id=\"功能陈述\"><a href=\"#功能陈述\" class=\"headerlink\" title=\"功能陈述\"></a>功能陈述</h1><p>将一个函数转换为一个为 Thunk 函数，这个函数被调用后会返回一个以回调函数为参数的函数。可以参考 <a href=\"http://es6.ruanyifeng.com/#docs/generator-async#Thunk-函数\" target=\"_blank\" rel=\"noopener\">Thunk 函数</a>。</p>","keywords":null,"content":null,"raw":null,"categories":[],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"}]},{"title":"简单谈谈 Node.js 对 ESM 的几种支持方案","slug":"words-on-the-support-of-esm-in-node","date":"2017-10-18T03:18:10.000Z","updated":"2018-04-12T21:44:51.000Z","comments":true,"path":"api/articles/words-on-the-support-of-esm-in-node.json","excerpt":"<p>简单谈谈目前 (2017 年 10 月), Node.js 对 ESM (ES6 Module) 的支持情况，并且发表一点自己的看法。</p>\n<h1 id=\"主流的方案\"><a href=\"#主流的方案\" class=\"headerlink\" title=\"主流的方案\"></a>主流的方案</h1><ol>\n<li>在文件开头添加 <code>&quot;use module&quot;;</code> 或类似字段</li>\n<li>新的文件后缀名，如 <code>.mjs</code></li>\n<li>通过源代码内容自动区分</li>\n<li>在 <code>package.json</code> 指明采用 <code>ESM</code> 的文件</li>\n</ol>","keywords":null,"content":null,"raw":null,"categories":[],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"}]}]}
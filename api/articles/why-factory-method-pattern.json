{"title":"思考为什么要用工厂模式","slug":"why-factory-method-pattern","date":"2017-11-09T18:01:59.000Z","updated":"2017-11-09T18:28:30.000Z","comments":true,"excerpt":"","content":"<p>以 JavaScript 为例子发表一下我对工厂模式 (Factory Pattern) 的看法</p>\n<p><strong>为什么不直接 new 呢? 我自己写代码直接 new 自己写的类不就好了么?</strong></p>\n<p>这里不得不提一下设计模式的意义。设计模式并不是凭空捏造的，而是长期开发所形成的经验之谈，当然这些经验自然是成功的，被认可的经验，否则设计模式就不会被那么多人认可和推崇了。</p>\n<p>设计模式主要针对的是大项目，也就是多个人的项目。A 并不一定知道 B 写了哪些类。通过工厂模式，A 在调用工厂类生产的实例的时候就不用关心 B 实现了哪些类了。</p>\n<p>举例:</p>\n<p>B 写的代码</p>\n\n    <pre><code class=\"lang-js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Factory</span> </span>{\n    static create (<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span>) </span>{\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">===</span> 1) </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">A</span>()\n        } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title\">===</span> 2) </span>{\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">B</span>()\n        } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">C</span>()\n        }\n    }\n}\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">A</span> </span>{ execute() {} <span class=\"hljs-comment\">/* ... */</span>}\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">B</span> </span>{ execute() {} <span class=\"hljs-comment\">/* ... */</span>}\n<span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">C</span> </span>{ execute() {} <span class=\"hljs-comment\">/* ... */</span>}\n</code></pre>\n<p>A 写的代码:</p>\n\n    <pre><code class=\"lang-js\"><span class=\"hljs-keyword\">const</span> foo = Factory.create(<span class=\"hljs-number\">1</span>)\n<span class=\"hljs-keyword\">const</span> bar = Factory.create(<span class=\"hljs-number\">2</span>)\n<span class=\"hljs-keyword\">await</span> foo.excute()\n<span class=\"hljs-keyword\">await</span> bar.excute()\n</code></pre>\n<p>如代码所示，A 只要知道返回回来的实例具有 <code>execute</code> 方法就足够了，不用去记住各种类名, 甚至没有感觉到自己拿到的其实是不同的类。同时，因为没有直接使用 <code>new</code> 具体的某个类，所以如果以后要修改类名的话就会简单很多 – 比如要把 <code>A</code> 改名为 <code>Ace</code>，那么只需额外在 <code>Factory</code> 里把 <code>A</code> 改为 <code>Ace</code> 就行了。</p>\n<p><strong>一般什么情况比较适合用工厂模式?</strong></p>\n<p>一般需要根据外界的一些动态环境选择具体实例哪些类，或者说具体选择实例哪个类需要很繁杂的判断。</p>\n\n    <pre><code class=\"lang-js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Factory</span> </span>{\n    <span class=\"hljs-keyword\">static</span> create (config) {\n        <span class=\"hljs-keyword\">if</span> (config.version &lt;= <span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">BasicApp</span>()\n        <span class=\"hljs-keyword\">if</span> (config.os === <span class=\"hljs-string\">'linux'</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">BashApp</span>()\n        <span class=\"hljs-keyword\">if</span> (config.os === <span class=\"hljs-string\">'windows'</span> &amp;&amp; config.online) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">OnlineApp</span>()\n        <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-type\">LocalApp</span>()\n    }\n}\n</code></pre>\n<p>如代码所示，如果要决定实例哪个类要许多复杂的判断，那么用工厂模式封装就会轻松很多。需要做判断的事情已经交给了写 <code>Factory</code> 的人，使要实例的开发者也不用去了解判断规则, 并且这在未来修改判断规则提供了便利。</p>\n<p>另外，有些人认为 <code>new</code> 一个具体的实例也是种硬编码。如果在一个项目里太多的地方用 <code>new</code>, 比如 <code>new Foo()</code>。那么 <code>Foo</code> 就与项目的多个地方有了紧密的联系。而为了使联系不那么紧密 (decouple)，将工厂作为两者之间的一个缓冲，使具体的类和需要类的地方被间接地连起来。我个人认为这个有一定道理，在一些大项目上可以考虑，但在小项目中似乎显得没那么必要。因为就算要改名，用 IDE 就可以替换掉几个文件中的所要替换的类名。</p>\n<p><strong>使用工厂模式有什么注意的么?</strong></p>\n<p>其实如上面看到的一样，<code>Factory</code> 返回回来的实例是实现了相同接口 / 功能的，因为这样才能使调用 <code>Factory</code> 的开发者真地只需要关心功能而可以忽略用了自己拿到的是具体什么类。例如，在 Java 之类的语言中，一般有大量的子类是继承了某抽象类，或实现了某接口，以此保证具有同一的方法名。</p>\n<p>如果返回回来的实例有实现功能的不同接口，那么工厂模式的效用将大打折扣。</p>\n\n    <pre><code class=\"lang-js\"><span class=\"hljs-keyword\">class</span> Factory {\n    <span class=\"hljs-keyword\">static</span> create (<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span>) {</span>\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> </span>=== <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> A()\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> </span>=== <span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> B()\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-class\"><span class=\"hljs-keyword\">type</span> </span>=== <span class=\"hljs-number\">3</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> C()\n    }\n}\n\n<span class=\"hljs-keyword\">class</span> A { print() {} }\n<span class=\"hljs-keyword\">class</span> B { output() {} }\n<span class=\"hljs-keyword\">class</span> C { echo() {} }\n</code></pre>\n<p>如代码所示，虽然 A, B, C 都实现了输出的功能。但是方法名不同，这导致多次调用 Factory 的开发者不得不时时刻刻提醒自己同样是从 Factory 拿到的对象为什么会有不同。这种设计或多或少会带来潜在的 bug。</p>\n<p><strong>什么时候不要用工厂模式?</strong></p>\n<p>设计模式是好东西，但不是万能的，只有特定的场合解决特定的问题。一般来讲，如果你的开发场景中没有出现本文前面所讲的 <em>复杂的实例过程</em> 或 <em>相同的接口</em> 的话，我个人就不建议使用了。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ol>\n<li><a href=\"https://addyosmani.com/resources/essentialjsdesignpatterns/book/\" target=\"_blank\" rel=\"noopener\">Learning JavaScript Design Patterns</a></li>\n<li><a href=\"https://www.zhihu.com/question/24843188\" target=\"_blank\" rel=\"noopener\">知乎: 工厂设计模式有什么用？</a></li>\n<li><a href=\"https://www.zhihu.com/question/42975862\" target=\"_blank\" rel=\"noopener\">知乎: 工厂模式（factory Method）的本质是什么？为什么引入工厂模式</a></li>\n<li><a href=\"https://stackoverflow.com/questions/69849/factory-pattern-when-to-use-factory-methods\" target=\"_blank\" rel=\"noopener\">Factory Pattern. When to use factory methods?</a></li>\n<li><a href=\"https://msdn.microsoft.com/en-us/library/ee817667.aspx\" target=\"_blank\" rel=\"noopener\">Exploring the Factory Design Pattern</a></li>\n</ol>\n","categories":[],"tags":[]}
{"title":"为什么 Vue 组件需要一个 name","slug":"name-attribute-in-vue-component","date":"2018-04-11T01:37:58.000Z","updated":"2018-04-12T19:39:00.000Z","comments":true,"excerpt":"<p>无论是通过 <code>Vue.component</code> 的方式，还是在写 <code>.vue</code> 文件的方式，官方都会推荐你写一个 <code>name</code> 属性。但是好像这个 name 在渲染时又几乎用不到，那么它实际能干嘛呢?</p>","content":"<p>无论是通过 <code>Vue.component</code> 的方式，还是在写 <code>.vue</code> 文件的方式，官方都会推荐你写一个 <code>name</code> 属性。但是好像这个 name 在渲染时又几乎用不到，那么它实际能干嘛呢?</p>\n<a id=\"more\"></a>\n<h1 id=\"方便调试\"><a href=\"#方便调试\" class=\"headerlink\" title=\"方便调试\"></a>方便调试</h1><p>Vue 有一款官方强力推荐的浏览器上的调试插件: <a href=\"https://github.com/vuejs/vue-devtools\" target=\"_blank\" rel=\"noopener\">vue-devtools</a>。通过打开调试工具，我们可以很轻松的看到已经渲染到页面上的各个组件，以及对应的组件的内部状态。</p>\n<p>例如以下组件:</p>\n\n    <pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n <span class=\"hljs-comment\">// Demo.vue</span>\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Kawaii'</span>,\n    <span class=\"hljs-attr\">props</span>: [<span class=\"hljs-string\">'val'</span>],\n    render (h) {\n      <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n          { this.val }\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n      )\n    }\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>如果在 App.vue 里引用的话:</p>\n\n    <pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Demo</span> <span class=\"hljs-attr\">val</span>=<span class=\"hljs-string\">\"foo\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> Demo <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/Demo'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'app'</span>,\n  <span class=\"hljs-attr\">components</span>: {\n    Demo\n  }\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>那么可以在 chrome 的调试界面可以看到:</p>\n<p><img src=\"https://i.loli.net/2018/04/11/5acd8954c11de.png\" alt=\"\"></p>\n<p>其中 <code>Kawaii</code> 就是刚才起了名字的组件，如果将其改名为 <code>看不见看不见</code></p>\n\n    <pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n <span class=\"hljs-comment\">// Demo.vue</span>\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'看不见看不见'</span>,\n    <span class=\"hljs-comment\">// ...</span>\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>那么在 chrome 界面则可以直接看到其显示名字就变为 <code>看不见看不见</code> 了。</p>\n<p><img src=\"https://i.loli.net/2018/04/11/5acd895501f79.png\" alt=\"\"></p>\n<p>但如果不设置名字，那么 Vue.js 默认会用 tag 名称，也就是这个组件在 <code>template</code> 或者 <code>jsx</code> 里的名字。比如:</p>\n\n    <pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n <span class=\"hljs-comment\">// Demo.vue</span>\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-comment\">// 不设置名字</span>\n    <span class=\"hljs-comment\">// name: '看不见看不见',</span>\n    <span class=\"hljs-comment\">// ...</span>\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n\n    <pre><code class=\"lang-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">D</span> <span class=\"hljs-attr\">val</span>=<span class=\"hljs-string\">\"foo\"</span> /&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> Demo <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/Demo'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'app'</span>,\n  <span class=\"hljs-attr\">components</span>: {\n    <span class=\"hljs-string\">'D'</span>: Demo\n  }\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>那么此时就会显示为 <code>D</code>:</p>\n<p><img src=\"https://i.loli.net/2018/04/11/5acd895531d51.png\" alt=\"\"></p>\n<blockquote>\n<p>Note: functional 组件不会显示在 devtools 中，因为 vue 并不会为 functional component 创建实例</p>\n</blockquote>\n<h1 id=\"递归应用\"><a href=\"#递归应用\" class=\"headerlink\" title=\"递归应用\"></a>递归应用</h1><p>在有些时候，我们可以会递归使用自身组件，比如:</p>\n\n    <pre><code class=\"lang-html\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    </span><span class=\"hljs-template-variable\">{{ val }}</span><span class=\"xml\">\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Recursive</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"val\"</span> <span class=\"hljs-attr\">:val</span>=<span class=\"hljs-string\">\"val - 1\"</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n  <span class=\"hljs-comment\">// Recursive.vue</span>\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Recursive'</span>,\n    <span class=\"hljs-attr\">props</span>: {\n      <span class=\"hljs-attr\">val</span>: {\n        <span class=\"hljs-attr\">required</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">type</span>: <span class=\"hljs-built_in\">Number</span>,\n        <span class=\"hljs-attr\">default</span>: <span class=\"hljs-number\">5</span>\n      }\n    }\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</span></code></pre>\n<p>在这种情况下，如果不设置 name，那么 console 就会报错，提示在 Recursive.vue 中找不到名为 <code>Recursive</code> 的组件。因此，如果想要递归应用自身组件的话，就必须设置 name 属性。</p>\n<h1 id=\"keep-alive\"><a href=\"#keep-alive\" class=\"headerlink\" title=\"keep-alive\"></a>keep-alive</h1><p>keep-alive 是 Vue 内置的组件，可以将 keep-alive 的子组件运行缓存，用于保存切换 (例如 v-if 的切换) 过程前的状态。</p>\n<p>而 keep-alive 有两个 props \b是 <code>include</code> 以及 <code>exclude</code>。前者指明需要缓存的组件的名字。而后者则指明不需要缓存的组件的名字。</p>\n<p>下述例子中，Foo, Bar 两个组件的名字分别为 <code>vue-foo</code>, <code>vue-bar</code>, 且组件均包含一个 input。因为通过 input 可以很轻松的观察到切换前后的状态是否有保存:</p>\n\n    <pre><code class=\"lang-html\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    </span><span class=\"hljs-template-variable\">{{ val }}</span><span class=\"xml\"> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">\"m\"</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-comment\">// Foo.vue</span>\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'vue-foo'</span>,\n    data () {\n      <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">val</span>: <span class=\"hljs-string\">'vue-foo'</span>,\n        <span class=\"hljs-attr\">m</span>: <span class=\"hljs-string\">'vue-foo'</span>\n      }\n    }\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</span></code></pre>\n<p>Bar.vue 跟 Foo.vue 内容几乎一样，除了名字，因此这里就不贴 Bar.vue 的代码了。</p>\n\n    <pre><code class=\"lang-html\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">keep-alive</span> <span class=\"hljs-attr\">include</span>=<span class=\"hljs-string\">\"vue-foo\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Foo</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"visible\"</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Bar</span> <span class=\"hljs-attr\">v-else</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">keep-alive</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"visible = !visible\"</span>&gt;</span>\n      Visible </span><span class=\"hljs-template-variable\">{{ visible }}</span><span class=\"xml\">\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> Foo <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/Foo'</span>\n<span class=\"hljs-keyword\">import</span> Bar <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./components/Bar'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'app'</span>,\n  data () {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">visible</span>: <span class=\"hljs-literal\">true</span>\n    }\n  },\n  <span class=\"hljs-attr\">components</span>: {\n    Foo,\n    Bar\n  }\n}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</span></code></pre>\n<p>通过点击 button 来切换。因为设置了 <code>include</code> 指令，那么只有 <code>Foo</code> 的状态才会被保存:</p>\n<p><img src=\"https://i.loli.net/2018/04/11/5acd8955d055b.gif\" alt=\"\"></p>\n<p>通过这张效果图可以看到，在切换过程中，<code>Foo</code> 的状态被保存了，而 <code>Bar</code> 则没有，而是重新生成。</p>\n<p>如果使用 <code>exclude</code> 指令:</p>\n\n    <pre><code class=\"lang-html\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">keep-alive</span> <span class=\"hljs-attr\">exclude</span>=<span class=\"hljs-string\">\"vue-foo\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Foo</span> <span class=\"hljs-attr\">v-if</span>=<span class=\"hljs-string\">\"visible\"</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Bar</span> <span class=\"hljs-attr\">v-else</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">keep-alive</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">\"visible = !visible\"</span>&gt;</span>\n      Visible </span><span class=\"hljs-template-variable\">{{ visible }}</span><span class=\"xml\">\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n</span></code></pre>\n<p>那么就会得到一个完全相反的结果: 即 <code>Bar</code> 的状态被保存了，而 <code>Foo</code> 则没有，而是重新生成。</p>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><ol>\n<li><a href=\"https://vuejs.org/v2/api/#keep-alive\" target=\"_blank\" rel=\"noopener\">api/#keep-alive</a></li>\n<li><a href=\"https://vuejs.org/v2/api/#name\" target=\"_blank\" rel=\"noopener\">api/#name</a></li>\n<li><a href=\"https://github.com/vuejs/vue-devtools/issues/280\" target=\"_blank\" rel=\"noopener\">vue-devtools/issues/280</a></li>\n</ol>\n","categories":[],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"}]}
{"title":"HTTP 协议中的 URL","slug":"http-protocol-url","date":"2017-12-16T20:22:33.000Z","updated":"2017-12-16T20:24:11.000Z","comments":true,"excerpt":"","content":"<h1 id=\"URL-概念\"><a href=\"#URL-概念\" class=\"headerlink\" title=\"URL 概念\"></a>URL 概念</h1><blockquote>\n<p>全称 Uniform Resource Locator (统一资源定位符)，是一种 URI (Uniform Resource Identifier, 统一资源标识符)</p>\n</blockquote>\n<h1 id=\"URL-作用\"><a href=\"#URL-作用\" class=\"headerlink\" title=\"URL 作用\"></a>URL 作用</h1><p>主要用于网络资源的定位。换句话说，当你想告诉 Alice 你的服务器上有一个有趣的文件想要分享时，你就可以告诉这个文件对应的 URL。那么 Alice 就可以根据这个 URL 找到你要分享的文件。而目前 URL 更通俗的被称为网址。</p>\n<h2 id=\"URL-诞生前的故事\"><a href=\"#URL-诞生前的故事\" class=\"headerlink\" title=\"URL 诞生前的故事\"></a>URL 诞生前的故事</h2><p>想了解 URL 的意义，那你必须要了解一下在 URL 诞生前，人们是怎么找资源的。同样，你要分享一个文件给 Alice。那么你要说: 使用一个 FTP 软件，连接到 ftp.example.com，然后使用用户名 anonymous 和密码 anonymous，接着切换到 doc 目录，再然后转换到 <code>binary mode</code> (二进制模式)，找到名为 <code>story.doc</code> 的文件下载并打开。</p>\n<p>但现在，你知道的，表示成 URL 就是 <code>ftp://ftp.example.com/doc/story.doc</code>。而且就下载而言，大部分浏览器已经具有 FTP 软件的一些功能。因此，URL 使你分享文件更加简单，因为别人更容易找到你想要分享的文件。</p>\n<h1 id=\"URL-与请求\"><a href=\"#URL-与请求\" class=\"headerlink\" title=\"URL 与请求\"></a>URL 与请求</h1><p>URL 常常出现在 HTTP 请求的 start-line，也就是请求的第一行，比如:</p>\n<pre><code>GET /hello.html HTTP/1.1\nHost: localhost:3000\nUser-Agent: ...\n</code></pre><h1 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h1><pre><code>&lt;scheme&gt;://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;path&gt;?&lt;query&gt;#&lt;frag&gt;\n</code></pre><p>依次解释一下</p>\n<h2 id=\"Scheme\"><a href=\"#Scheme\" class=\"headerlink\" title=\"Scheme\"></a>Scheme</h2><p>指代协议类型，告诉浏览器怎么去访问目标资源。常见的有 <code>FTP</code>, <code>HTTP</code>, <code>HTTPS</code>。 注意它是不区分大小写的，因此 <code>http://example.com</code> 与 <code>HTTP://example.com</code> 是完全等价的。</p>\n<h2 id=\"User-和-password\"><a href=\"#User-和-password\" class=\"headerlink\" title=\"User 和 password\"></a>User 和 password</h2><p>某些协议需要密码，<code>FTP</code> 中就有时可以看到，举上面分享文件的例子，加上用户名密码就是 <code>ftp://anonymous:anonymous@ftp.example.com/doc/story.doc</code>。</p>\n<h2 id=\"host-和-port\"><a href=\"#host-和-port\" class=\"headerlink\" title=\"host 和 port\"></a>host 和 port</h2><p>host 可以有两种表现形式，一种是域名，一种是 IP。不过域名只是为了方便记忆，因为在访问目标地址的时候，域名会通过 DNS 服务器解析为 IP。之后再通过寻找目标地址。</p>\n<p>port 就是端口，平时访问网站之所以不用写端口，是因为它在 HTTP 协议中默认为 80 端口。</p>\n<h2 id=\"path\"><a href=\"#path\" class=\"headerlink\" title=\"path\"></a>path</h2><p>就是路径了。指代资源的位置，比如 <code>http://example.com/hello.doc</code>。说得就是 <code>hello.doc</code> 在服务器目录的根目录下。路径表示和 Unix 系统中的路径表示很相似，用 <code>/</code> 分隔。</p>\n<p>但是在如今开发中 path 变得有抽象意义了，像上一个例子比较直白告诉你就是 <code>hello.doc</code>。但当今大多数路径并不能表示在服务器目录中的具体位置，而更像是在逻辑关系中的一种层级关系, 比如 <code>http://github.com/lazzzis/Test</code> 当然不是代表：你要的那个资源是在服务器的一个名为 <code>lazzzis</code> 的目录下的一个叫 <code>Test</code> 的文件。</p>\n<h2 id=\"query\"><a href=\"#query\" class=\"headerlink\" title=\"query\"></a>query</h2><p><code>query</code> 的形式以键值对的形式出现，即: <code>key=value</code>，多个键值对之间以 <code>&amp;</code> 分隔。</p>\n<p><code>query</code>，常用于查询，在请求服务器的时候提供更多的额外信息。</p>\n<h2 id=\"fragment\"><a href=\"#fragment\" class=\"headerlink\" title=\"fragment\"></a>fragment</h2><p>有时也被称为 <code>anchor</code> / <code>锚点</code>，指示当前文件内容的一个片段，有点类似于书签。</p>\n<p><code>https://github.com/chancejs/chancejs#packages</code>。<code>#packages</code> 表示文件中代表 <code>packages</code> 的那一段，浏览器一般会自动帮你跳转到那一行。</p>\n<p>注意的是，在发送带有 <code>fragment</code> 的请求时，<code>fragment</code> 其实不会包含在 HTTP 请求里。也就是说，服务器接受到的请求消息里并没有 <code>fragment</code> 这一部分。原因是，服务器通常只能把 <code>https://github.com/chancejs/chancejs</code> 代表的整个资源返回，而不能只返回 <code>#packages</code> 代表的那一段。</p>\n<h1 id=\"字符的一些限制\"><a href=\"#字符的一些限制\" class=\"headerlink\" title=\"字符的一些限制\"></a>字符的一些限制</h1><p>通常情况下，HTTP 协议对可以出现在 URL 的字符作出了限制。比如一般你很难看到 URL 有中文或日文，等非英文字母。一般遇到中文等语言的字符，URL 会对其编码，转换成一个 <code>%</code> 开头的字符串。</p>\n<p>如图，虽然我输入的是中文<code>火狐</code>，但 HTTP 请求消息中出现的是已经对其编码。</p>\n<p><img src=\"https://i.loli.net/2017/12/17/5a3580135e99d.png\" alt=\"\"></p>\n<p>除了中文字符，空格，斜杠等字符也会被编码，否则会在 URL 中引起歧义。比如 空格被编码为 <code>%20</code></p>\n<h1 id=\"URL-潜在的问题\"><a href=\"#URL-潜在的问题\" class=\"headerlink\" title=\"URL 潜在的问题\"></a>URL 潜在的问题</h1><p>用 URL 表示资源的一个问题就是资源的对应的 URL 变化时，之前的 URL 就没用了。例如，原先用户 alice 的主页是 <code>http://example.com/alice</code>。但 <code>alice</code> 改名了，变成 <code>eve</code>，那么她的主页变成 <code>http://example.com/eve</code>。这时，她的朋友们可能因为仍旧通过 <code>http://example.com/alice</code> 访问她的主页而导致访问失败。</p>\n<p>不过现在有些网站会提示 <code>alice</code> 已经更名为 <code>eve</code>，然后帮助浏览者跳转至 <code>http://example.com/eve</code>。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ol>\n<li><a href=\"https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E5%AE%9A%E4%BD%8D%E7%AC%A6\" target=\"_blank\" rel=\"noopener\">统一资源定位符</a></li>\n<li><a href=\"http://shop.oreilly.com/product/9781565925090.do\" target=\"_blank\" rel=\"noopener\">HTTP: The Definitive Guide</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages\" target=\"_blank\" rel=\"noopener\">HTTP Messages</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Identifying_resources_on_the_Web\" target=\"_blank\" rel=\"noopener\">Identifying resources on the Web</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2010/02/url_encoding.html\" target=\"_blank\" rel=\"noopener\">关于URL编码</a></li>\n</ol>\n","categories":[],"tags":[{"name":"HTTP","path":"api/tags/HTTP.json"}]}
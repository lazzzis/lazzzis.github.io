{"title":"借助 Proxy 实现一个 DefaultDict","slug":"defaultdict-in-js","date":"2017-10-01T02:44:12.000Z","updated":"2017-10-01T04:33:21.000Z","comments":true,"excerpt":"","content":"<p>这里的 <code>DefaultDict</code> 指的是类似于 Python 中的 <a href=\"https://docs.python.org/3/library/collections.html#collections.defaultdict\" target=\"_blank\" rel=\"external\"><code>defaultdict</code></a> 的一种类。其基本特点就是当某个属性不存在于该对象中时，该对象会自动为这个属性创建一个默认值。这个默认值是由用户在创建 <code>DefaultDict</code> 时指定的。</p>\n<p>举个例子，现在需要一个对象，如果某个属性不在这个对象时，在为这个属性赋值为 0.</p>\n<pre><code class=\"js\">const words = [&#39;hello&#39;, &#39;hello&#39;, &#39;world&#39;, &#39;please&#39;, &#39;say&#39;, &#39;say&#39;, &#39;say&#39;]\nconst defaultDict = defaultDictFactory({}, () =&gt; 0)\nfor (const word of words) {\n    defaultDict[word]++\n}\nconsole.log(defaultDict)\n/*\n{ hello: 3,\n  world: 2,\n  please: 2,\n  say: 4}\n*/\n</code></pre>\n<p>这个例子其实就是非常简单的一个统计单词数量的一个例子，如果不使用 <code>defaultDict</code>, 那么估计就会这么写:</p>\n<pre><code class=\"js\">const words = [&#39;hello&#39;, &#39;hello&#39;, &#39;world&#39;, &#39;please&#39;, &#39;say&#39;, &#39;say&#39;, &#39;say&#39;]\nconst defaultDict = {}\nfor (const word of words) {\n    defaultDict[word] = defaultDict[word] == null ? 1 : defaultDict[word] + 1\n}\n</code></pre>\n<p>你觉得那个更美观或实用一点呢？ 这个其实见仁见智，至少前者确实带来了一些便利。</p>\n<p>回到正题，这里开始讲怎么去实现它。</p>\n<h1 id=\"Proxy-对象\"><a href=\"#Proxy-对象\" class=\"headerlink\" title=\"Proxy 对象\"></a>Proxy 对象</h1><p>实现的方法很多，不一定必须要 <code>Proxy</code> 对象，但它最为 ES6 推出的一个类，有必要去尝试一下。简单的说，<code>Proxy</code> 可以改变对象的一些默认行为，包括增删改查。</p>\n<p>举个例子:</p>\n<pre><code class=\"js\">const obj = new Proxy({}, {\n  get: function (target, prop) {\n    console.log(target, prop)\n    return target[prop]\n  }\n})\n\nobj.foo = 1\nconsole.log(obj[&#39;bar&#39;])\n/*\n{ foo: 1 } &#39;bar&#39;\nundefined\n*/\n</code></pre>\n<p>可见，<code>Proxy</code> 对对象属性的获取进行了一点修改。在这里 <code>obj.foo = 1</code>  不属于对 <code>foo</code> 属性的获取，而是对 <code>foo</code> 属性的赋值(set)，所以在执行 <code>obj.foo = 1</code> 时，<code>get: function (target, prop) { ... }</code> 并没有被执行。</p>\n<p>更多的可以参考 <a href=\"http://es6.ruanyifeng.com/#docs/proxy\" target=\"_blank\" rel=\"external\">ECMAScript 6 入门: Proxy</a></p>\n<h1 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h1><p>这里先定义个 <code>handler</code>，也就是对对象的属性获取进行拦截。那么这里需要思考，需要哪些参数呢？</p>\n<p>首先一个，如何确认默认值，那么默认值的产生需要用户定义。所以我们需要一个 <code>defaultFactory</code> 函数用于生成默认值，这里使用了函数，为了有更多的可操作空间。</p>\n<p>另外，如何判断一个属性在不在这个对象中呢？大部分用 <code>&#39;foo&#39; in obj</code> 判断，但极少时候用其它方式。所以这里就设置一个默认操作，如果用户没有指定，我们就用 <code>in</code> 操作符判断属性是否存在。</p>\n<p>这么到这里可以基本实现了 <code>defaultDict</code>:</p>\n<pre><code class=\"js\">function defaultDictFactory (initials, defaultFactory, validator) {\n  if (validator == null) {\n    validator = (prop, object) =&gt; prop in object\n  }\n  return new Proxy(initials, {\n    get: function (target, prop) {\n      if (!validator(prop, target)) {\n        target[prop] = defaultFactory(target, prop)\n      }\n      return target[prop]\n    }\n  })\n}\n</code></pre>\n<p><code>defaultDictFactory</code> 作为一个工厂函数，专门生产 <code>defaultDict</code>。本来我想用 <code>class</code> 实现，不过遇到了瓶颈，所以改为工厂模式。<br><code>initials</code> 为初始对象，因为用户或许会将一个非空对象转化为 <code>defaultDict</code>。<br><code>defaultFactory</code> 函数用于生产默认值。<br><code>validator</code> 判断属性是否存在，可以有用户自定义判断属性是否存在的规则。</p>\n<p>但为了安全起见，可以加一些对参数的检查。</p>\n<pre><code class=\"js\">function defaultDictFactory (initials, defaultFactory, validator) {\n  if (defaultFactory == null || typeof defaultFactory !== &#39;function&#39;) {\n    throw new TypeError(`defaultFactory must be a function`)\n  }\n  if (validator != null &amp;&amp; typeof validator !== &#39;function&#39;) {\n    throw new TypeError(`validator must be a function`)\n  } else if (validator == null) {\n    validator = (prop, object) =&gt; prop in object\n  }\n  return new Proxy(initials, {\n    get: function (target, prop) {\n      if (!validator(prop, target)) {\n        target[prop] = defaultFactory(prop, target)\n      }\n      return target[prop]\n    }\n  })\n}\n</code></pre>\n<p>这样子基本就完成了 <code>defaultDictFactory</code> 的定义。</p>\n<h1 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h1><p>这里还是以统计单词为例，增加 1 个要求: 单词的默认值为单词的长度</p>\n<p>那么只需要设置 <code>defaultFactory</code>:</p>\n<pre><code class=\"js\">const words = [&#39;hello&#39;, &#39;hello&#39;, &#39;world&#39;, &#39;please&#39;, &#39;say&#39;, &#39;say&#39;, &#39;say&#39;]\nconst defaultDict = defaultDictFactory({}, (prop) =&gt; prop.length)\nfor (const word of words) {\n  defaultDict[word]++\n}\nconsole.log(Object.entries(defaultDict))\n/*\n[ [ &#39;hello&#39;, 7 ], [ &#39;world&#39;, 6 ], [ &#39;please&#39;, 7 ], [ &#39;say&#39;, 6 ] ]\n*/\n</code></pre>\n<h1 id=\"其它\"><a href=\"#其它\" class=\"headerlink\" title=\"其它\"></a>其它</h1><p>建立 <code>defaultDict</code> 的最初想法一方面来自于 Python 的 <a href=\"https://docs.python.org/3/library/collections.html#collections.defaultdict\" target=\"_blank\" rel=\"external\"><code>defaultdict</code></a>，因为这确实挺方便的。另一方面则来自于对平时刷题时经常遇到的 <code>obj.foo = obj.foo == null ? 1 : obj.foo + 1</code> 的这种写法觉得不美观的写法，所以试图改变一下。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><ol>\n<li><a href=\"https://gist.github.com/thomasboyt/5987633\" target=\"_blank\" rel=\"external\">http://es6.ruanyifeng.com/#docs/proxy</a></li>\n<li><a href=\"https://gist.github.com/thomasboyt/5987633\" target=\"_blank\" rel=\"external\">https://gist.github.com/thomasboyt/5987633</a></li>\n</ol>\n","categories":[],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"}]}
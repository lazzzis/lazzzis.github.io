{"name":"Front-end","postlist":[{"title":"sort some list elements into an descreasing ones in js","slug":"list-sort-in-js","date":"2015-11-18T01:35:40.000Z","updated":"2018-04-12T21:43:27.000Z","comments":true,"path":"api/articles/list-sort-in-js.json","excerpt":"<h2 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h2><p>Sort is a prevalent topic in programing. Although the sort operation mostly is handled by the back-end like PHP, Java and so on, occasionaly some are occured in front-end. Here are some simple instances I dealt with recently.</p>\n<h2 id=\"Bubble-like-Sort\"><a href=\"#Bubble-like-Sort\" class=\"headerlink\" title=\"Bubble-like Sort\"></a>Bubble-like Sort</h2><p>Suppose some list elements ordered as follows:</p>\n<pre><code class=\"html\">&lt;ul id=&quot;demo&quot;&gt;\n    &lt;li&gt;2&lt;/li&gt;\n    &lt;li&gt;1&lt;/li&gt;\n    &lt;li&gt;4&lt;/li&gt;\n    &lt;li&gt;3&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<p>Every time I filter through the nodes to get the smallest-value one from 1st one to 4nd one, and then I put it to the tail of lists. Next, I still filter to get the smallest-value one but from 1st one to 3nd one, and still put it to the tail to the lists. Now, two elements are sorted, and still two ones stay idle. The operation continues until all the elements have been sorted.<br>The produceres can be illustrated as follows:</p>\n<blockquote>\n<p>2 1 4 3 -&gt; 2 4 3 1 -&gt; 4 3 1 2 -&gt; 4 1 2 3 -&gt; 1 2 3 4</p>\n</blockquote>","keywords":null,"content":null,"raw":null,"categories":[{"name":"Front-end","path":"api/categories/Front-end.json"}],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"}]},{"title":"在初学JS时犯的一些错误","slug":"mis-in-js","date":"2015-10-25T00:18:27.000Z","updated":"2018-04-12T21:43:34.000Z","comments":true,"path":"api/articles/mis-in-js.json","excerpt":"<p>表示最近在学JS, 相对个人以前学的Python, JAVA之类的语言, JS的语言确实有一些”奇葩”. 把初学时的一些语法错误记录下来,方便自己以后查阅, 如果能帮助到读这篇文章的你自然就更好了.</p>\n<h2 id=\"number-与-string-相加-减-乘-除\"><a href=\"#number-与-string-相加-减-乘-除\" class=\"headerlink\" title=\"number 与 string 相加/减/乘/除\"></a>number 与 string 相加/减/乘/除</h2><h3 id=\"Example-1\"><a href=\"#Example-1\" class=\"headerlink\" title=\"Example 1:\"></a>Example 1:</h3><pre><code class=\"js\">var a  = &quot;5&quot; + 2;   // the result is &quot;52&quot;\nvar b = 2 + &quot;5&quot;;    // the result is &quot;25&quot;\n</code></pre>","keywords":null,"content":null,"raw":null,"categories":[{"name":"Front-end","path":"api/categories/Front-end.json"}],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"}]},{"title":"创建了适用于 hexo 的一个主题 mls","slug":"new-blog-theme-mls","date":"2016-11-11T00:46:55.000Z","updated":"2018-04-12T21:43:40.000Z","comments":true,"path":"api/articles/new-blog-theme-mls.json","excerpt":"<p>之前用的主题是基于 <a href=\"https://github.com/hexojs/hexo-theme-landscape\" target=\"_blank\" rel=\"noopener\">landscape</a>, 虽然这确实是一个不错的主题，使用上也没什么不便，但毕竟这是一个他人贡献的主题。我一直想试着自己做一个主题。之前也尝试在 landscape 上改，修改了一些颜色，对 CSS 做了一些简单修改，但布局没变，整体一眼还是能看出这是 landscape，并且因为我当时不熟悉 EJS 模板，对 Sass 及 CSS3 不是特别熟悉，所以有些功能的实现也完全不知道怎么做，比如一些透明效果的动画。</p>\n<p>最近一段时间，相对以前来说稍微不忙了点，所以趁这个机会试着做一个主题了。</p>","keywords":null,"content":null,"raw":null,"categories":[{"name":"Front-end","path":"api/categories/Front-end.json"}],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"},{"name":"CSS","path":"api/tags/CSS.json"},{"name":"Sass","path":"api/tags/Sass.json"}]},{"title":"在JS中实现静态变量/函数","slug":"static-in-js","date":"2015-10-30T16:54:13.000Z","updated":"2018-04-12T21:44:13.000Z","comments":true,"path":"api/articles/static-in-js.json","excerpt":"<h2 id=\"静态变量-方法\"><a href=\"#静态变量-方法\" class=\"headerlink\" title=\"静态变量/方法\"></a>静态变量/方法</h2><p>静态变量/方法，一般来说是独立於对象的存在，它不属於任何一个具体的对象，它属於每一特定类的所有对象。也可以认为是属於一个类的。静态变量一般用於常数，或者存储某一类的所有对象需要共有的变量。<br>学JS的时候发现，与JAVA，C++相比，JS并没有明确定义静态的声明或使用方法。虽然没有说，但仍然需要，比如一个很经典的需要就时用静态变量统计一个类被实例化了几次。</p>","keywords":null,"content":null,"raw":null,"categories":[{"name":"Front-end","path":"api/categories/Front-end.json"}],"tags":[{"name":"JavaScript","path":"api/tags/JavaScript.json"}]}]}